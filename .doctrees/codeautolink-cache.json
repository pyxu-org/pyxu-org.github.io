{
  "fair/plugins/index": [],
  "fair/plugins/pyxu_eigh": [],
  "fair/plugins/pyxu_finufft": [],
  "fair/plugins/pyxu_gradient_descent": [],
  "fair/plugins/pyxu_xrt": [],
  "fair/plugins_preview/CSEEG": [],
  "fair/plugins_preview/DSP-Notebooks": [],
  "fair/plugins_preview/EnvironTracker": [],
  "fair/plugins_preview/HVOX": [],
  "fair/plugins_preview/HoughDetector": [],
  "fair/plugins_preview/OrientationPy": [],
  "fair/plugins_preview/PYFW": [],
  "fair/plugins_preview/Palentologist": [],
  "fair/plugins_preview/PhaseRet": [],
  "fair/plugins_preview/PycGSP": [],
  "fair/plugins_preview/PycSphere": [],
  "fair/plugins_preview/TVDenoiser": [],
  "fair/plugins_preview/TokamakRec": [],
  "fair/plugins_preview/UncertaintyQuant": [],
  "fair/plugins_preview/WaveProp": [],
  "fair/plugins_preview/index": [],
  "fair/plugins_preview/pycNUFFT": [],
  "fair/plugins_preview/pycWavelet": [],
  "guide/algebra": [],
  "intro/primer": [],
  "intro/tomo": [
    {
      "source": "seed = 0\n\n# Generate phantom with xdesign\nnp.random.seed(seed)\np1 = xd.Foam(size_range=[0.1, 0.01], gap=0.025, porosity=0.5)\nphantom = xd.discrete_phantom(p1, 160) * 10\nphantom = np.abs(np.pad(phantom, 20))\n\n# Generate theoretical and empirical sinogram\nrng = np.random.default_rng(seed)\npsnr = 20\nangles, wsize = 90, 5\nideal_sino = ski.transform.radon(phantom, theta=np.linspace(0, 180, angles), circle=True)\nsino = sp.ndimage.uniform_filter(ideal_sino, [wsize, 0], mode='constant')\nmask = rng.binomial(1, 0.95, sino.shape)\nsino *= mask\nsino *= sp.signal.get_window('hamming', sino.shape[0])[:, None]\nsigma = np.abs(sino).max() * (10**(-psnr/10))\nsino += rng.normal(scale=sigma, size=sino.shape)\n\n# Plot phantom and sinograms\nplt.subplot(1,3,1)\nplt.imshow(phantom)\nplt.title(\"Phantom\")\nplt.axis('off')\n\nplt.subplot(1,3,2)\nplt.imshow(ideal_sino, aspect=0.45)\nplt.title(\"Ideal Sinogram\")\nplt.axis('off')\n\nplt.subplot(1,3,3)\nplt.imshow(sino, aspect=0.45)\nplt.title(\"Measured Sinogram\")\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "A-Non-Ideal-Parallel-beam-Tomographic-Setup",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "A Non-Ideal Parallel-beam Tomographic Setup"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fbp_ideal = ski.transform.iradon(radon_image=ideal_sino, filter_name=\"hamming\")\nfbp_measured = ski.transform.iradon(radon_image=sino, filter_name=\"hamming\")\nsino_fillin = sp.ndimage.uniform_filter(sino, [wsize, 0], mode='constant')\nfbp_fillin = ski.transform.iradon(radon_image=sino_fillin, filter_name=\"hamming\")\n\nplt.subplot(2,3,1)\nplt.imshow(phantom)\nplt.title('Phantom')\nplt.axis('off')\n\nplt.subplot(2,3,2)\nplt.imshow(fbp_ideal)\nplt.title('FBP (Ideal Sinogram)')\nplt.axis('off')\n\nplt.subplot(2,3,3)\nplt.imshow(fbp_measured)\nplt.title('FBP (Measured Sinogram)')\nplt.axis('off')\n\nplt.subplot(2,3,6)\nplt.imshow(fbp_fillin)\nplt.title('FBP (Filled-in Measured Sinogram)')\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Naive-Application-of-Filtered-Back-Projection",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Naive Application of Filtered-Back Projection"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import pyxu.abc as pxa\nimport pyxu.operator as pxo\nfrom pyxu.operator.interop import from_source\nimport skimage.transform as skt\n\n# Radon Operator (imported from `skt` since Pyxu did not ship with a Radon transform at the time of this writing.)\nRadon = from_source(cls=pxa.LinOp,\n                    shape=(sino.size, phantom.size),\n                    apply=lambda _, arr: skt.radon(arr.reshape(phantom.shape),\n                                                   theta=np.linspace(0, 180, angles),\n                                                   circle=True).ravel(),\n                    adjoint=lambda _, arr: skt.iradon(arr.reshape(sino.shape),\n                                                      filter_name=None,\n                                                      circle=True).ravel(),\n                    vectorize=[\"apply\", \"adjoint\"],\n                    vmethod=\"scan\",\n                    enforce_precision=[\"apply\", \"adjoint\"])\n\n# 1D Filtering\nboxcar = np.asarray(sp.signal.get_window(\"boxcar\", wsize)); boxcar /= wsize\nBoxCar1D = pxo.Stencil(kernel=[boxcar, np.array([1.0])], center=(wsize // 2, 0), arg_shape=sino.shape,)\n\n# Partial Masking\nMask = pxo.DiagonalOp(mask.ravel())\n\n# Tapering\ntaper = np.outer(sp.signal.get_window(\"hamming\", sino.shape[0]), np.ones(sino.shape[1]))\nTaper = pxo.DiagonalOp(taper.ravel())\n\n# Compose operators\nPhi = Taper * Mask * BoxCar1D * Radon",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_source"
          ],
          "code_str": "from_source",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.interop.from_source"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_source"
          ],
          "code_str": "from_source",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_source"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil"
          ],
          "code_str": "pxo.Stencil",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil",
            "()"
          ],
          "code_str": "BoxCar1D",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DiagonalOp"
          ],
          "code_str": "pxo.DiagonalOp",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "pyxu.operator.DiagonalOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DiagonalOp"
          ],
          "code_str": "pxo.DiagonalOp",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "pyxu.operator.DiagonalOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil",
            "()"
          ],
          "code_str": "BoxCar1D",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "print(Phi.expr())",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "predicted_sino = Phi(phantom.ravel()).reshape(sino.shape)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "plt.subplot(1,3,1)\nplt.imshow(sino, aspect=0.45)\nplt.title(\"Measured Sinogram\")\nplt.axis('off')\n\nplt.subplot(1,3,2)\nplt.imshow(predicted_sino, aspect=0.45)\nplt.title(\"Predicted Sinogram\")\nplt.axis('off')\n\nplt.subplot(1,3,3)\nplt.imshow(np.abs(sino-predicted_sino), aspect=0.45)\nplt.title(\"Absolute Difference\")\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import pyxu.opt.stop as pxst\n\nstop_crit = pxst.RelError(eps=1e-3, var=\"x\", f=None, norm=2, satisfy_all=True) | pxst.MaxIter(500)\npinv_solution = Phi.pinv(sino.ravel(), damp=4,\n                         kwargs_init=dict(show_progress=False, verbosity=50),\n                         kwargs_fit=dict(stop_crit=stop_crit))",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "pxst.RelError",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxst.MaxIter",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "dict"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pseudoinverse-Solution",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Pseudoinverse Solution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "plt.subplot(1,3,1)\nplt.imshow(phantom)\nplt.title('Phantom')\nplt.axis('off')\n\nplt.subplot(1,3,2)\nplt.imshow(fbp_fillin)\nplt.title('Filtered Back Projection')\nplt.axis('off')\n\nplt.subplot(1,3,3)\nplt.imshow(pinv_solution.reshape(phantom.shape))\nplt.title('Pseudoinverse Solution')\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pseudoinverse-Solution",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Pseudoinverse Solution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator import Gradient, SquaredL2Norm, L1Norm, PositiveL1Norm\n\n# TV prior\ngrad = Gradient(arg_shape=phantom.shape, accuracy=4, mode='constant', diff_method='fd')\nlambda_= 0.05 / (2 * sigma**2)\nhuber_norm = L1Norm(grad.shape[0]).moreau_envelope(0.01)  # We smooth the L1 norm to facilitate optimisation\ntv_prior = lambda_ * huber_norm * grad\n\n# Positivity + L1 norm\nposL1 = 0.05 * PositiveL1Norm(phantom.size)\n\n# Loss\nloss = (1/ (2 * sigma**2)) * SquaredL2Norm(dim=sino.size).asloss(sino.ravel()) * Phi\n\n# Smooth part of the posterior\nsmooth_posterior = loss + tv_prior\nsmooth_posterior.diff_lipschitz = smooth_posterior.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# TV prior\ngrad = Gradient(arg_shape=phantom.shape, accuracy=4, mode='constant', diff_method='fd')\nlambda_= 0.05 / (2 * sigma**2)\nhuber_norm = L1Norm(grad.shape[0]).moreau_envelope(0.01)\ntv_prior = lambda_ * huber_norm * grad",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 658
    },
    {
      "source": "# Positivity + L1 norm\nposL1 = 0.05 * PositiveL1Norm(phantom.size)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 672
    },
    {
      "source": "# Loss\nloss = (1/ (2 * sigma**2)) * SquaredL2Norm(dim=sino.size).asloss(sino.ravel()) * Phi",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 681
    },
    {
      "source": "# Posterior\nsmooth_posterior = loss + tv_prior\nsmooth_posterior.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 692
    },
    {
      "source": "from pyxu.opt.solver import PGD\n\n# Define the solver\nsolver = PGD(f=smooth_posterior, g=posL1, show_progress=False, verbosity=250)\n\n# Call fit to trigger the solver\nsolver.fit(x0=0*pinv_solution.ravel(), acceleration=True, stop_crit=stop_crit)\nrecon_tv = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "plt.subplot(1,3,1)\nplt.imshow(fbp_fillin)\nplt.title('Filtered Back Projection')\nplt.axis('off')\n\nplt.subplot(1,3,2)\nplt.imshow(pinv_solution.reshape(phantom.shape))\nplt.title('Pseudoinverse Solution')\nplt.axis('off')\n\nplt.subplot(1,3,3)\nplt.imshow(recon_tv.reshape(phantom.shape))\nplt.title('MAP Solution (TV+)')\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scipy.ndimage import median_filter\n\ndef denoiser(arr, arg_shape, wsize):\n    arr = arr.reshape(arg_shape)\n    return median_filter(arr, size=wsize).ravel()\n\nclass MedianFilterPnP(pxa.ProxDiffFunc):\n    def __init__(self, arg_shape, wsize):\n        super().__init__((1, np.prod(arg_shape)))\n        self._arg_shape = arg_shape\n        self.wsize= wsize\n        self.diff_lipschitz = 1\n\n    def apply(self, arr):\n        return NotImplemented  # PnP priors are implicit: they do not have an apply method!\n\n    def grad(self, arr):\n        return arr - denoiser(arr, self._arg_shape, self.wsize)  # Differential form\n\n    def prox(self, arr, tau=None):  # `tau`` is not used since this is not a proper proximal operator.\n        return denoiser(arr, self._arg_shape, self.wsize)  # Proximal form",
      "names": [
        {
          "import_components": [
            "scipy",
            "ndimage"
          ],
          "code_str": "scipy.ndimage",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "scipy.ndimage"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.ndimage.median_filter"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "scipy.ndimage.median_filter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxDiffFunc"
          ],
          "code_str": "pxa.ProxDiffFunc",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxDiffFunc"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "NotImplemented"
          ],
          "code_str": "NotImplemented",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "NotImplemented"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "medpnp = MedianFilterPnP(phantom.shape, (3,3))",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "loss.diff_lipschitz = loss.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define the solver\nsolver = PGD(f=loss, g=medpnp, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxst.MaxIter(250))\nrecon_pnp_prox = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxst.MaxIter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define new composite smooth term (sum of the loss and weighted implicit prior)\ncomposite_smooth = loss + 0.1 * medpnp\n\n# Define the solver\nsolver = PGD(f=composite_smooth, g=None, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxst.MaxIter(250))\nrecon_pnp_smooth = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxst.MaxIter",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "plt.subplot(2,3,1)\nplt.imshow(pinv_solution.reshape(phantom.shape))\nplt.title('Pseudoinverse Solution')\nplt.axis('off')\n\nplt.subplot(2,3,2)\nplt.imshow(recon_tv.reshape(phantom.shape))\nplt.title('MAP Solution (TV+)')\nplt.axis('off')\n\nplt.subplot(2,3,3)\nplt.imshow(recon_pnp_prox.reshape(phantom.shape))\nplt.title('PnP (Prox)')\nplt.axis('off')\n\nplt.subplot(2,3,6)\nplt.imshow(recon_pnp_smooth.reshape(phantom.shape))\nplt.title('PnP (Diff)')\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "medpnp = MedianFilterPnP(phantom.shape, (5, 5))",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define the solver\nsolver = PGD(f=loss, g=medpnp, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxst.MaxIter(250))\nrecon_pnp_prox = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxst.MaxIter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "plt.subplot(1,3,1)\nplt.imshow(pinv_solution.reshape(phantom.shape))\nplt.title('Pseudoinverse Solution')\nplt.axis('off')\n\nplt.subplot(1,3,2)\nplt.imshow(recon_tv.reshape(phantom.shape))\nplt.title('MAP Solution (TV+)')\nplt.axis('off')\n\nplt.subplot(1,3,3)\nplt.imshow(recon_pnp_prox.reshape(phantom.shape))\nplt.title('PnP (Prox)')\nplt.axis('off');",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerized Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    }
  ],
  "references": [],
  "sg_execution_times": [],
  "api/abc": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.abc import ProxFunc\n\nclass L1Norm(ProxFunc):\n    def __init__(self, dim: int):\n        super().__init__(dim_shape=dim, codim_shape=1)\n    def apply(self, arr):\n        return np.linalg.norm(arr, axis=-1, keepdims=True, ord=1)\n    def prox(self, arr, tau):\n        return np.clip(np.abs(arr)-tau, a_min=0, a_max=None) * np.sign(arr)\n\nmu = [0.1, 0.5, 1]\nf = [L1Norm(dim=1).moreau_envelope(_mu) for _mu in mu]\nx = np.linspace(-1, 1, 512).reshape(-1, 1)  # evaluation points\n\nfig, ax = plt.subplots(ncols=2)\nfor _mu, _f in zip(mu, f):\n    ax[0].plot(x, _f(x), label=f\"mu={_mu}\")\n    ax[1].plot(x, _f.grad(x), label=f\"mu={_mu}\")\nax[0].set_title('Moreau Envelope')\nax[1].set_title(\"Derivative of Moreau Envelope\")\nfor _ax in ax:\n    _ax.legend()\n    _ax.set_aspect(\"equal\")\nfig.tight_layout()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "numpy",
            "linalg",
            "norm"
          ],
          "code_str": "np.linalg.norm",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.linalg.norm"
        },
        {
          "import_components": [
            "numpy",
            "clip"
          ],
          "code_str": "np.clip",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.clip"
        },
        {
          "import_components": [
            "numpy",
            "sign"
          ],
          "code_str": "np.sign",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.sign"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "zip"
          ],
          "code_str": "zip",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "zip"
        }
      ],
      "example": {
        "document": "api/abc",
        "ref_id": "pyxu-abc-operator",
        "headings": [
          "pyxu.abc",
          "Table of Contents",
          "pyxu.abc.operator"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/experimental/index": [],
  "api/experimental/sampler": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.experimental.sampler as pxe_sampler\nimport pyxu.operator as pxo\nimport scipy as sp\n\nf = pxo.SquaredL2Norm(dim=1) / 2  # To sample 1D normal distribution (mean 0, variance 1)\nula = pxe_sampler.ULA(f=f)  # Sampler with maximum step size\nula_lb = pxe_sampler.ULA(f=f, gamma=1e-1)  # Sampler with small step size\n\ngen_ula = ula.samples(x0=np.zeros(1))\ngen_ula_lb = ula_lb.samples(x0=np.zeros(1))\nn_burn_in = int(1e3)  # Number of burn-in iterations\nfor i in range(n_burn_in):\n    next(gen_ula)\n    next(gen_ula_lb)\n\n# Online statistics objects\nmean_ula = pxe_sampler.OnlineMoment(order=1)\nmean_ula_lb = pxe_sampler.OnlineMoment(order=1)\nvar_ula = pxe_sampler.OnlineVariance()\nvar_ula_lb = pxe_sampler.OnlineVariance()\n\nn = int(1e4)  # Number of samples\nsamples_ula = np.zeros(n)\nsamples_ula_lb = np.zeros(n)\nfor i in range(n):\n    sample = next(gen_ula)\n    sample_lb = next(gen_ula_lb)\n    samples_ula[i] = sample\n    samples_ula_lb[i] = sample_lb\n    mean = float(mean_ula.update(sample))\n    var = float(var_ula.update(sample))\n    mean_lb = float(mean_ula_lb.update(sample_lb))\n    var_lb = float(var_ula_lb.update(sample_lb))\n\n# Theoretical variances of biased stationary distributions of ULA\nbiased_var = 1 / (1 - ula._gamma / 2)\nbiased_var_lb = 1 / (1 - ula_lb._gamma / 2)\n\n# Quantify goodness of fit of empirical distribution with theoretical distribution (Cram\u00e9r-von Mises test)\ncvm = sp.stats.cramervonmises(samples_ula, \"norm\", args=(0, np.sqrt(biased_var)))\ncvm_lb = sp.stats.cramervonmises(samples_ula_lb, \"norm\", args=(0, np.sqrt(biased_var_lb)))\n\n# Plots\ngrid = np.linspace(-4, 4, 1000)\n\nplt.figure()\nplt.title(\n    f\"ULA samples (large step size) \\n Empirical mean: {mean:.3f} (theoretical: 0) \\n \"\n    f\"Empirical variance: {var:.3f} (theoretical: {biased_var:.3f}) \\n\"\n    f\"Cram\u00e9r-von Mises goodness of fit: {cvm.statistic:.3f}\"\n)\nplt.hist(samples_ula, range=(min(grid), max(grid)), bins=100, density=True)\nplt.plot(grid, sp.stats.norm.pdf(grid), label=r\"$p(x)$\")\nplt.plot(grid, sp.stats.norm.pdf(grid, scale=np.sqrt(biased_var)), label=r\"$p_{\\gamma_1}(x)$\")\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.title(\n    f\"ULA samples (small step size) \\n Empirical mean: {mean_lb:.3f} (theoretical: 0) \\n \"\n    f\"Empirical variance: {var_lb:.3f} (theoretical: {biased_var_lb:.3f}) \\n\"\n    f\"Cram\u00e9r-von Mises goodness of fit: {cvm_lb.statistic:.3f}\"\n)\nplt.hist(samples_ula_lb, range=(min(grid), max(grid)), bins=100, density=True)\nplt.plot(grid, sp.stats.norm.pdf(grid), label=r\"$p(x)$\")\nplt.plot(grid, sp.stats.norm.pdf(grid, scale=np.sqrt(biased_var_lb)), label=r\"$p_{\\gamma_2}(x)$\")\nplt.legend()\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler"
          ],
          "code_str": "pyxu.experimental.sampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.experimental.sampler"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA"
          ],
          "code_str": "pxe_sampler.ULA",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()"
          ],
          "code_str": "ula",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA"
          ],
          "code_str": "pxe_sampler.ULA",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()"
          ],
          "code_str": "ula_lb",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment"
          ],
          "code_str": "pxe_sampler.OnlineMoment",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment",
            "()"
          ],
          "code_str": "mean_ula",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment"
          ],
          "code_str": "pxe_sampler.OnlineMoment",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment",
            "()"
          ],
          "code_str": "mean_ula_lb",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineVariance"
          ],
          "code_str": "pxe_sampler.OnlineVariance",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.OnlineVariance"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineVariance"
          ],
          "code_str": "pxe_sampler.OnlineVariance",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.OnlineVariance"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "cramervonmises"
          ],
          "code_str": "sp.stats.cramervonmises",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "scipy.stats.cramervonmises"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "cramervonmises"
          ],
          "code_str": "sp.stats.cramervonmises",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "scipy.stats.cramervonmises"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "hist"
          ],
          "code_str": "plt.hist",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.hist"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "hist"
          ],
          "code_str": "plt.hist",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.hist"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 69,
          "end_lineno": 69,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 70,
          "end_lineno": 70,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/experimental/sampler",
        "ref_id": "remarks",
        "headings": [
          "pyxu.experimental.sampler",
          "Remarks"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/index": [],
  "api/info.deps": [],
  "api/info.ptype": [],
  "api/info.warning": [],
  "api/math": [],
  "api/operator.interop": [],
  "api/operator/blocks": [],
  "api/operator/func": [],
  "api/operator/index": [],
  "guide/algorithms": [],
  "guide/bayes": [
    {
      "source": "# Importing necessary libraries and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom pyxu.operator import L21Norm, Gradient, SquaredL2Norm, PositiveOrthant, IdentityOp\nfrom pyxu.opt.solver import PD3O\nfrom pyxu.opt.stop import RelError\nfrom PIL import Image",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm"
          ],
          "code_str": "L21Norm",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant"
          ],
          "code_str": "PositiveOrthant",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "IdentityOp"
          ],
          "code_str": "IdentityOp",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.base.IdentityOp"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "RelError",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "pyxu.opt.stop.RelError"
        }
      ],
      "example": {
        "document": "guide/bayes",
        "ref_id": "First,-import-the-necessary-modules:",
        "headings": [
          "Implementing with Pyxu",
          "First, import the necessary modules:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Loading and preprocessing the image\ndata = Image.open(\"../_static/favicon.png\").convert(\"L\")\ndata = (np.asarray(data).astype(\"float32\") / 255.0)[::4, ::4]",
      "names": [
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.asarray"
        }
      ],
      "example": {
        "document": "guide/bayes",
        "ref_id": "Loading-and-Preprocessing-the-Image",
        "headings": [
          "Implementing with Pyxu",
          "Loading and Preprocessing the Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Adding noise to the image using the identity operator\nid_op = IdentityOp(dim_shape=data.shape)\n\nsigma = 0.05  # Standard deviation of the Gaussian noise\ny = id_op(data)\ny = np.random.normal(y, sigma)  # Adding noise\ny = y.clip(0, 1)  # Clipping to maintain pixel values between 0 and 1",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "IdentityOp"
          ],
          "code_str": "IdentityOp",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.IdentityOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "IdentityOp",
            "()"
          ],
          "code_str": "id_op",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.IdentityOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "IdentityOp",
            "()"
          ],
          "code_str": "id_op",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.IdentityOp"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "guide/bayes",
        "ref_id": "Adding-Noise-to-the-Image",
        "headings": [
          "Implementing with Pyxu",
          "Adding Noise to the Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Setting up the MAP approach with total variation prior and positivity constraint\nsl2 = SquaredL2Norm(dim_shape=y.shape).argshift(-y)\nloss = sl2 * id_op  # Data fidelity term\n\nbeta = 0.025  # Parameter related to the noise level\nlambda_ = (2 * sigma ** 2) / beta  # Regularization parameter\n\nl21 = L21Norm(dim_shape=(2, *y.shape), l2_axis=(0, ))  # Total variation prior\ngrad = Gradient(\n    dim_shape=y.shape,\n    diff_method=\"fd\",\n    scheme=\"central\",\n    accuracy=8,\n)  # Gradient operator\n\nstop_crit = RelError(\n    eps=1e-5,\n    var=\"x\",\n    f=None,\n    norm=2,\n    satisfy_all=True,\n)\n\npositivity = PositiveOrthant(dim_shape=y.shape)  # Positivity constraint\nsolver = PD3O(f=loss, g=positivity, h=lambda_ * l21, K=grad, show_progress=False)\nsolver.fit(x0=y, stop_crit=stop_crit)  # Solving the optimization problem",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "IdentityOp",
            "()"
          ],
          "code_str": "id_op",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.IdentityOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm"
          ],
          "code_str": "L21Norm",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm",
            "()"
          ],
          "code_str": "l21",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "RelError",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError",
            "()"
          ],
          "code_str": "stop_crit",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant"
          ],
          "code_str": "PositiveOrthant",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant",
            "()"
          ],
          "code_str": "positivity",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant",
            "()"
          ],
          "code_str": "positivity",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm",
            "()"
          ],
          "code_str": "l21",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()"
          ],
          "code_str": "solver",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError",
            "()"
          ],
          "code_str": "stop_crit",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        }
      ],
      "example": {
        "document": "guide/bayes",
        "ref_id": "MAP-Approach-with-Total-Variation-Prior-and-Positivity-Constraint",
        "headings": [
          "Implementing with Pyxu",
          "MAP Approach with Total Variation Prior and Positivity Constraint"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Obtaining the denoised image\nrecons = solver.solution().reshape(y.shape)\nrecons = recons.clip(0, 1)  # clipping to maintain pixel values between 0 and 1\n\n# Visualizing the images\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\naxs[0].imshow(data, cmap='gray')\naxs[0].set_title(\"Original Image\")\naxs[0].axis('off')\n\naxs[1].imshow(y, cmap='gray')\naxs[1].set_title(\"Noisy Image\")\naxs[1].axis('off')\n\naxs[2].imshow(recons, cmap='gray')\naxs[2].set_title(\"Denoised Image\")\naxs[2].axis('off')\n\nplt.tight_layout()\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "tight_layout"
          ],
          "code_str": "plt.tight_layout",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.tight_layout"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "guide/bayes",
        "ref_id": "Obtaining-and-Visualizing-the-Denoised-Image",
        "headings": [
          "Implementing with Pyxu",
          "Obtaining and Visualizing the Denoised Image"
        ]
      },
      "doc_lineno": null
    }
  ],
  "guide/diff_ops": [
    {
      "source": "import numpy as np\n\ndef D(f):\n    \"\"\"\n    Computes the partial derivative via forward finite differences.\n\n    Input\n    -----\n    f: vector\n        Input signal\n\n    Output\n    ------\n    y: vector\n        Derivative\n    \"\"\"\n\n    y = np.zeros_like(f)\n    for n in range(len(f) - 1):\n        y[n] = f[n + 1] - f[n]\n    return y",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "zeros_like"
          ],
          "code_str": "np.zeros_like",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.zeros_like"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "range"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Partial-Derivatives",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\n\nrng = np.random.default_rng(0)\n\nfrom pyxu.operator import PartialDerivative",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Finite-Differences-Approximation-to-the-Partial-Derivative",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives",
          "Finite Differences Approximation to the Partial Derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# 1) Define ground truth signal\n\nN = 500  # number of points\nx_ax = np.linspace(0, 2 * np.pi, N)  # coordinates\ndx = x_ax[1] - x_ax[0]  # sampling or pixel size\n\narr = np.sin(x_ax)  # ground truth signal\nderivative = np.cos(x_ax)  # ground truth derivative\n\n\n# 2) Define noisy measurements\nnoise = rng.normal(scale=0.01, size=N)\narr_noisy = arr + noise\n\n\n# 3) Instantiate partial derivative operator via finite differences\nfinite_difference = PartialDerivative.finite_difference(\n    dim_shape=(N,),\n    order=(1,),\n    scheme=\"forward\",\n    accuracy=1,\n    sampling=dx,  # we should include the pixel size for accurate approximation\n)\n\n# 4) Estimate derivative\nderivative_fd = finite_difference(arr)\nderivative_fd_noisy = finite_difference(arr_noisy)\n\n# 5) Plot results\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax, derivative_fd, ls=\"--\", label=\"Finite difference (non-noisy signal)\", c=\"C2\"\n)\naxs[1].plot(\n    x_ax,\n    derivative_fd_noisy,\n    label=\"Finite difference (noisy signal)\",\n    zorder=0,\n    c=\"C3\",\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend();",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Finite-Differences-Approximation-to-the-Partial-Derivative",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives",
          "Finite Differences Approximation to the Partial Derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "gaussian_derivative = PartialDerivative.gaussian_derivative(\n    dim_shape=(N,), order=(1,), sigma=dx, truncate=1, sampling=(dx,)\n)\ngaussian_derivative.visualize()",
      "names": [],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Gaussian-Derivative-Approximation-to-the-Partial-Derivative",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives",
          "Gaussian Derivative Approximation to the Partial Derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "derviative_gd = gaussian_derivative(arr_noisy)\nderviative_fd = finite_difference(arr_noisy)\n\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax,\n    derivative_fd_noisy,\n    label=\"Finite difference (noisy signal)\",\n    zorder=0,\n    c=\"C3\",\n)\naxs[1].plot(\n    x_ax, derviative_gd, label=\"Gaussian derivative (noisy signal)\", c=\"C4\", zorder=1\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Gaussian-Derivative-Approximation-to-the-Partial-Derivative",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives",
          "Gaussian Derivative Approximation to the Partial Derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "gaussian_derivative_accurate = PartialDerivative.gaussian_derivative(\n    dim_shape=(N,), order=(1,), sigma=dx, truncate=4, sampling=(dx,)\n)\n\n\nderviative_gd_accurate = gaussian_derivative_accurate(arr_noisy)\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax, derviative_gd, label=\"Gaussian derivative (1x$\\sigma$)\", c=\"C4\", zorder=0\n)\naxs[1].plot(\n    x_ax,\n    derviative_gd_accurate,\n    label=\"Gaussian derivative (4x$\\sigma$)\",\n    c=\"C6\",\n    zorder=1,\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Gaussian-Derivative-Approximation-to-the-Partial-Derivative",
        "headings": [
          "Differential Operators in Pyxu",
          "Partial Derivatives",
          "Gaussian Derivative Approximation to the Partial Derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from PIL import Image\nfrom pyxu.operator import Gradient\n\ntoucan = np.array(Image.open(\"../_static/favicon.png\").convert(\"L\"))\ntoucan = toucan.astype(float)\ntoucan /= toucan.max()\n\ngrad = Gradient(\n    dim_shape=toucan.shape,\n    diff_method=\"gd\",\n    sigma=6,\n)\n\nout = grad(toucan)\n\n# Plot\nfig = plt.figure(figsize=(8, 6), constrained_layout=True)\ngs = fig.add_gridspec(4, 2)\naxs = [\n    fig.add_subplot(gs[1:-1, 0]),\n    fig.add_subplot(gs[:2, 1]),\n    fig.add_subplot(gs[2:, 1]),\n]\nim = axs[0].imshow(toucan, cmap=\"gray_r\")\naxs[0].set_title(r\"$\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[0])\nim = axs[1].imshow(\n    out[1], cmap=\"seismic\", vmin=-np.max(np.abs(out[1])), vmax=np.max(np.abs(out[1]))\n)\naxs[1].set_title(r\"$\\nabla_{x}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[2].set_title(r\"$\\nabla_{y}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[2])\n\nfor ax in axs:\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(r\"$x$\")\n    ax.set_ylabel(r\"$y$\")",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_gridspec"
          ],
          "code_str": "fig.add_gridspec",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_gridspec"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Gradient",
        "headings": [
          "Differential Operators in Pyxu",
          "Stacks of Partial Derivatives",
          "Gradient"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator import Hessian\n\nhes = Hessian(\n    dim_shape=toucan.shape,\n    diff_method=\"gd\",\n    sigma=6,\n)\n\nout = hes(toucan)\n\n# Plot\nfig = plt.figure(figsize=(12, 6), constrained_layout=True)\ngs = fig.add_gridspec(4, 3)\naxs = [\n    fig.add_subplot(gs[1:-1, 0]),\n    fig.add_subplot(gs[:2, 1]),\n    fig.add_subplot(gs[2:, 1]),\n    fig.add_subplot(gs[:2, 2]),\n    fig.add_subplot(gs[2:, 2]),\n]\nim = axs[0].imshow(toucan, cmap=\"gray_r\")\naxs[0].set_title(r\"$\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[0])\nim = axs[1].imshow(\n    out[2], cmap=\"seismic\", vmin=-np.max(np.abs(out[2])), vmax=np.max(np.abs(out[2]))\n)\naxs[1].set_title(r\"$\\mathbf{H}_{xx}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(\n    out[1], cmap=\"seismic\", vmin=-np.max(np.abs(out[1])), vmax=np.max(np.abs(out[1]))\n)\naxs[2].set_title(r\"$\\mathbf{H}_{yx}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[2])\nim = axs[3].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[3].set_title(r\"$\\mathbf{H}_{xy}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[3])\nim = axs[4].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[4].set_title(r\"$\\mathbf{H}_{yy}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[4])\n\nfor ax in axs:\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(r\"$x$\")\n    ax.set_ylabel(r\"$y$\")",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Hessian"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.operator.Hessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()"
          ],
          "code_str": "fig",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_gridspec"
          ],
          "code_str": "fig.add_gridspec",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_gridspec"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure",
            "()",
            "add_subplot"
          ],
          "code_str": "fig.add_subplot",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.figure.Figure.add_subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "guide/diff_ops",
        "ref_id": "Hessian",
        "headings": [
          "Differential Operators in Pyxu",
          "Stacks of Partial Derivatives",
          "Hessian"
        ]
      },
      "doc_lineno": null
    }
  ],
  "guide/funcs": [
    {
      "source": "import numpy as np\nfrom pyxu.abc import Func\n\nclass SquaredL2(Func):\n    def __init__(self, dim_shape):\n        super().__init__(dim_shape=dim_shape, codim_shape=1)\n\n    def apply(self, arr):\n        # Calculate over the last dimensions to support batching dimensions.\n        # This ensures the squared L2 norm is applied in parallel across batches.\n        axis = tuple(range(-len(self.dim_shape), 0))\n        return (arr**2).sum(axis=axis)[..., np.newaxis]",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "Func"
          ],
          "code_str": "Func",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.Func"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "Func"
          ],
          "code_str": "Func",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.Func"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "tuple"
        }
      ],
      "example": {
        "document": "guide/funcs",
        "ref_id": "Func:-The-Foundation-Stone-\ud83e\uddf1",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "Func: The Foundation Stone \ud83e\uddf1"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "l2_loss = SquaredL2(data.shape).argshift(-data)  # computes ||<arr> - data||^{2}",
      "names": [],
      "example": {
        "document": "guide/funcs",
        "ref_id": "Func:-The-Foundation-Stone-\ud83e\uddf1",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "Func: The Foundation Stone \ud83e\uddf1"
        ]
      },
      "doc_lineno": 55
    },
    {
      "source": "from pyxu.abc import DiffFunc\n\nclass SquaredL2(DiffFunc):\n    def __init__(self, dim_shape):\n        super().__init__(dim_shape=dim_shape, codim_shape=1)\n\n    def apply(self, arr):\n        axis = tuple(range(-len(self.dim_shape), 0))\n        return (arr**2).sum(axis=axis)[..., np.newaxis]\n\n    def grad(self, arr):\n        return 2 * arr",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "DiffFunc"
          ],
          "code_str": "DiffFunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.DiffFunc"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "DiffFunc"
          ],
          "code_str": "DiffFunc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.DiffFunc"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "tuple"
        }
      ],
      "example": {
        "document": "guide/funcs",
        "ref_id": "DiffFunc:-Differentiable-Functionals-\ud83c\udfaf",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "DiffFunc: Differentiable Functionals \ud83c\udfaf"
        ]
      },
      "doc_lineno": 68
    },
    {
      "source": "from pyxu.abc import ProxFunc\n\nclass L1Norm(ProxFunc):\n    def __init__(self, dim_shape):\n        super().__init__(dim_shape=dim_shape, codim_shape=1)\n\n    def apply(self, arr):\n        axis = tuple(range(-len(self.dim_shape), 0))\n        return np.abs(arr).sum(axis=axis, keepdims=True)\n\n    def prox(self, arr, tau):\n        return np.sign(arr) * np.clip(np.abs(arr) - tau, 0, None)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "numpy",
            "sign"
          ],
          "code_str": "np.sign",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.sign"
        },
        {
          "import_components": [
            "numpy",
            "clip"
          ],
          "code_str": "np.clip",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.clip"
        }
      ],
      "example": {
        "document": "guide/funcs",
        "ref_id": "ProxFunc:-Proximable-Functionals-\ud83d\udee1\ufe0f",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "ProxFunc: Proximable Functionals \ud83d\udee1\ufe0f"
        ]
      },
      "doc_lineno": 92
    },
    {
      "source": "huber = L1Norm(dim_shape).moreau_envelope(mu=0.1)",
      "names": [],
      "example": {
        "document": "guide/funcs",
        "ref_id": "Moreau-Envelope-for-Smoothing",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "ProxFunc: Proximable Functionals \ud83d\udee1\ufe0f",
          "Moreau Envelope for Smoothing"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "from pyxu.abc import ProxFunc\nfrom scipy.ndimage import median_filter\n\nclass MedianFilterPrior(ProxFunc):\n    def __init__(self, dim_shape):\n        super().__init__(dim_shape=dim_shape, codim_shape=1)\n\n    def apply(self, arr):\n        return NotImplementedError  # apply method not provided\n\n    def prox(self, arr, tau):\n        return median_filter(arr, size=5)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "scipy",
            "ndimage"
          ],
          "code_str": "scipy.ndimage",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "scipy.ndimage"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "scipy.ndimage.median_filter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "NotImplementedError"
          ],
          "code_str": "NotImplementedError",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "NotImplementedError"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "scipy.ndimage.median_filter"
        }
      ],
      "example": {
        "document": "guide/funcs",
        "ref_id": "Implicit-Functionals:-The-Undercover-Agents-\ud83d\udd75\ufe0f\u200d\u2640\ufe0f",
        "headings": [
          "Loss & Regularization Functionals",
          "Functionals Hierarchy in Pyxu",
          "Implicit Functionals: The Undercover Agents \ud83d\udd75\ufe0f\u200d\u2640\ufe0f"
        ]
      },
      "doc_lineno": 146
    },
    {
      "source": "from pyxu.operator import SquaredL2Norm\n\nloss = SquaredL2Norm(dim_shape=b.shape).argshift(-b) * A",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        }
      ],
      "example": {
        "document": "guide/funcs",
        "ref_id": "Practical-Example:-Deblurring-through-Least-Squares-\ud83c\udf20",
        "headings": [
          "Loss & Regularization Functionals",
          "Crafting Custom Loss Functionals through Composition with Forward Operators",
          "Practical Example: Deblurring through Least-Squares \ud83c\udf20"
        ]
      },
      "doc_lineno": 180
    }
  ],
  "guide/fwdops": [
    {
      "source": "class Sum(LinOp):\n    def apply(self, arr):\n        return arr.sum(keepdims=True)\n\n    def adjoint(self, arr):\n        return arr * np.ones(self.dim_shape)",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "class Sum(LinOp):\n    pass",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 41
    },
    {
      "source": "def apply(self, arr):\n    return arr.sum(keepdims=True)",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "def adjoint(self, arr):\n    return arr * np.ones(self.shape[1])",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 61
    },
    {
      "source": "my_operator.lipschitz = my_operator.estimate_lipschitz()",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 104
    },
    {
      "source": "pseudo_inv_result = my_operator.pinv(my_array, damp=value)",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 114
    },
    {
      "source": "op = LinOp.from_array(np.ones((N, N)))",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 120
    }
  ],
  "guide/hpc": [
    {
      "source": "import pyxu.abc as pxa\nimport pyxu.util as pxu\nimport pyxu.runtime as pxrt\n\nclass Median(pxa.Func):\n    def __init__(self, dim_shape):\n        super(Median, self).__init__(dim_shape=dim_shape, codim_shape=1)\n\n    # Enforce input/output precision.\n    @pxrt.enforce_precision(i=\"arr\")\n    def apply(self, arr):\n        xp = pxu.get_array_module(arr)   # Find the array module.\n        # Calculate over the last dimensions to support batching dimensions.\n        axis = tuple(range(-len(self.dim_shape), 0))\n        return xp.median(arr,            # Dispatch the median call to the right backend.\n                         axis=axis,        # Allow for batch dimensions.\n                         keepdims=True)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "runtime"
          ],
          "code_str": "pyxu.runtime",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.runtime"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "Func"
          ],
          "code_str": "pxa.Func",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.Func"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "pyxu",
            "runtime",
            "enforce_precision"
          ],
          "code_str": "pxrt.enforce_precision",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.runtime.enforce_precision"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "get_array_module"
          ],
          "code_str": "pxu.get_array_module",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.util.get_array_module"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "tuple"
        }
      ],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import time as t\nimport numpy as np\nimport pyxu.info.deps as pxd\n\ntimings = dict()\ndim_shape = (5, )\nm = Median(dim_shape)\nfor xp in pxd.supported_array_modules():  # Loops over supported array backends\n    # Apply the operator in turn on a various array types.\n    rng = xp.random.default_rng()\n    arr = rng.standard_normal(size=dim_shape)\n    out = m.apply(arr)\n    print(type(out), out.dtype, pxu.compute(out))  # we use compute() to evaluate Dask arrays.",
      "names": [
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "info",
            "deps"
          ],
          "code_str": "pyxu.info.deps",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.info.deps"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "pyxu",
            "info",
            "deps",
            "supported_array_modules"
          ],
          "code_str": "pxd.supported_array_modules",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.info.deps.supported_array_modules"
        },
        {
          "import_components": [
            "type"
          ],
          "code_str": "type",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "type"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "compute"
          ],
          "code_str": "pxu.compute",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.util.compute"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "%%timeit\nwith pxrt.Precision(pxrt.Width.SINGLE):\n    # Single precision is used for the computation\n    out = m.apply(np.arange(26*np.prod(dim_shape)).reshape(26, *dim_shape))",
      "names": [],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "%%timeit\nwith pxrt.Precision(pxrt.Width.DOUBLE):\n    # Double precision is used for the computation\n    out = m.apply(np.arange(26*np.prod(dim_shape)).reshape(26, *dim_shape))",
      "names": [],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "class HierarchicalMedian(pxa.Func):\n    def __init__(self, dim_shape):\n        super().__init__(dim_shape=dim_shape, codim_shape=1)\n\n    def apply(self, arr):\n        xp = pxu.get_array_module(arr)\n\n        subs = []\n        for i in range(10):\n            x = arr[..., 10*i:10*(i+1)]\n            y = xp.median(x, axis=-1, keepdims=True)\n            subs.append(y)\n        y = xp.concatenate(subs, axis=-1)\n\n        z = xp.median(y, axis=-1, keepdims=True)\n        return z",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "Func"
          ],
          "code_str": "pxa.Func",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.Func"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "get_array_module"
          ],
          "code_str": "pxu.get_array_module",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pyxu.util.get_array_module"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "range"
        }
      ],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import dask.array as da\n\ndim = 500\nhm = HierarchicalMedian(dim)\nhm(da.arange(26*dim).reshape(26, dim)).visualize(optimize_graph=True)",
      "names": [
        {
          "import_components": [
            "dask",
            "array",
            "arange"
          ],
          "code_str": "da.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "dask.array.arange"
        }
      ],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "timings = dict()\nfor xp in pxd.supported_array_modules():\n    t1 = t.time()\n    out = pxu.compute(hm.apply(xp.arange(26*dim).reshape(26, dim)))\n    timings[xp.__name__] = t.time()-t1\nprint(timings)",
      "names": [
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "pyxu",
            "info",
            "deps",
            "supported_array_modules"
          ],
          "code_str": "pxd.supported_array_modules",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.info.deps.supported_array_modules"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "t.time",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "compute"
          ],
          "code_str": "pxu.compute",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.util.compute"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "t.time",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "guide/hpc",
        "ref_id": "Hands-on-Example:",
        "headings": [
          "High Performance Computing Features",
          "Hands-on Example:"
        ]
      },
      "doc_lineno": null
    }
  ],
  "guide/index": [],
  "guide/lipschitz": [
    {
      "source": "# Access Lipschitz constant of an operator 'op'\nL = op.lipschitz",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Accessing-Lipschitz-Constants",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Accessing Lipschitz Constants"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "# Estimate Lipschitz constant and update the attribute\nL = op.estimate_lipschitz()\nop.lipschitz = L",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Estimating-Lipschitz-Constants",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants"
        ]
      },
      "doc_lineno": 42
    },
    {
      "source": "# Using trace method\nop.lipschitz = op.estimate_lipschitz(method=\"trace\")",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Supported-Backends-\ud83c\udf9b\ufe0f",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Supported Backends \ud83c\udf9b\ufe0f"
        ]
      },
      "doc_lineno": 55
    },
    {
      "source": "# Using SVD method with reduced accuracy\nop.lipschitz = op.estimate_lipschitz(method=\"svd\", tol=1e-3)",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Supported-Backends-\ud83c\udf9b\ufe0f",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Supported Backends \ud83c\udf9b\ufe0f"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "from pyxu.abc import LinOp\nimport numpy as np\n\nrand_op = LinOp.from_array(np.random.random((10000, 10000)))",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "LinOp",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "random"
          ],
          "code_str": "np.random.random",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.random"
        }
      ],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "rand_op.lipschitz  # Unknown as this stage",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "%%timeit\nrand_op.lipschitz = rand_op.estimate_lipschitz(method=\"trace\")",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "rand_op.lipschitz  # Rough estimate",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "%%timeit\nrand_op.lipschitz = rand_op.estimate_lipschitz(method=\"svd\", tol=1e-2)",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "rand_op.lipschitz # Tighter estimate",
      "names": [],
      "example": {
        "document": "guide/lipschitz",
        "ref_id": "Hands-On-Example-\ud83c\udf93",
        "headings": [
          "Lipschitz Constants and Automatic Step Size Tuning",
          "Estimating Lipschitz Constants",
          "Hands-On Example \ud83c\udf93"
        ]
      },
      "doc_lineno": null
    }
  ],
  "index": [],
  "intro/comparison": [],
  "intro/index": [],
  "intro/installation": [],
  "api/operator/linop": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import MovingAverage\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\nma = MovingAverage(dim_shape, size=5)\nout = ma(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "MovingAverage"
          ],
          "code_str": "MovingAverage",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.MovingAverage"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "MovingAverage"
          ],
          "code_str": "MovingAverage",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.MovingAverage"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import DoG\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\ndog = DoG(dim_shape, low_sigma=3)\nout = dog(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.DoG"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.DoG"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import Laplace\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\nlaplace = Laplace(dim_shape)\nout = laplace(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplace"
          ],
          "code_str": "Laplace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Laplace"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplace"
          ],
          "code_str": "Laplace",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Laplace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import Sobel\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\nsobel = Sobel(dim_shape)\nout = sobel(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Sobel"
          ],
          "code_str": "Sobel",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Sobel"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Sobel"
          ],
          "code_str": "Sobel",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Sobel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import Prewitt\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\nprewitt = Prewitt(dim_shape)\nout = prewitt(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Prewitt"
          ],
          "code_str": "Prewitt",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Prewitt"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Prewitt"
          ],
          "code_str": "Prewitt",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Prewitt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyxu.operator import Scharr\n\ndim_shape = (11, 11)\nimage = np.zeros(dim_shape)\nimage[5, 5] = 1.\n\nscharr = Scharr(dim_shape)\nout = scharr(image)\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Scharr"
          ],
          "code_str": "Scharr",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Scharr"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Scharr"
          ],
          "code_str": "Scharr",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Scharr"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import StructureTensor\nfrom pyxu.util.misc import peaks\n\n# Define input image\nn = 1000\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\nnsamples = 2\ndim_shape = image.shape  # (1000, 1000)\nimages = np.tile(image, (nsamples, 1, 1))\n# Instantiate structure tensor operator\nstructure_tensor = StructureTensor(dim_shape=dim_shape)\n\noutputs = structure_tensor(images)\nprint(outputs.shape)  # (2, 3, 1000, 1000)\n# Plot\nplt.figure()\nplt.imshow(images[0])\nplt.colorbar()\nplt.title(\"Image\")\nplt.axis(\"off\")\n\nplt.figure()\nplt.imshow(outputs[0][0])\nplt.colorbar()\nplt.title(r\"$\\hat{S}_{xx}$\")\nplt.axis(\"off\")\n\nplt.figure()\nplt.imshow(outputs[0][1])\nplt.colorbar()\nplt.title(r\"$\\hat{S}_{xy}$\")\nplt.axis(\"off\")\n\nplt.figure()\nplt.imshow(outputs[0][2])\nplt.colorbar()\nplt.title(r\"$\\hat{S}_{yy}$\")\nplt.axis(\"off\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "StructureTensor"
          ],
          "code_str": "StructureTensor",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.StructureTensor"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "tile"
          ],
          "code_str": "np.tile",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.tile"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "StructureTensor"
          ],
          "code_str": "StructureTensor",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.StructureTensor"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "StructureTensor",
            "()"
          ],
          "code_str": "structure_tensor",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.StructureTensor"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "StructureTensor",
            "()"
          ],
          "code_str": "structure_tensor",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.StructureTensor"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "remark",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Filters",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import PartialDerivative\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\ndim_shape = image.shape  # Shape of our image\n# Specify derivative order at each direction\ndf_dx = (1, 0)  # Compute derivative of order 1 in first dimension\nd2f_dy2 = (0, 2)  # Compute derivative of order 2 in second dimension\nd3f_dxdy2 = (1, 2)  # Compute derivative of order 1 in first dimension and der. of order 2 in second dimension\n# Instantiate derivative operators\nsigma = 2.0\ndiff1 = PartialDerivative.gaussian_derivative(order=df_dx, dim_shape=dim_shape, sigma=sigma / np.sqrt(2))\ndiff2 = PartialDerivative.gaussian_derivative(order=d2f_dy2, dim_shape=dim_shape, sigma=sigma / np.sqrt(2))\ndiff = PartialDerivative.gaussian_derivative(order=d3f_dxdy2, dim_shape=dim_shape, sigma=sigma)\n# Compute derivatives\nout1 = (diff1 * diff2)(image)\nout2 = diff(image)\n# Plot derivatives\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\nim = axs[0].imshow(image)\naxs[0].axis(\"off\")\naxs[0].set_title(\"f(x,y)\")\nplt.colorbar(im, ax=axs[0])\naxs[1].imshow(out1)\naxs[1].axis(\"off\")\naxs[1].set_title(r\"$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$\")\nplt.colorbar(im, ax=axs[1])\n\naxs[2].imshow(out2)\naxs[2].axis(\"off\")\naxs[2].set_title(r\"$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$\")\nplt.colorbar(im, ax=axs[2])\n\n# Check approximation error\nplt.figure()\nplt.imshow(abs(out1 - out2)), plt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import PartialDerivative\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\ndim_shape = image.shape  # Shape of our image\n# Specify derivative order at each direction\ndf_dx = (1, 0) # Compute derivative of order 1 in first dimension\nd2f_dy2 = (0, 2) # Compute derivative of order 2 in second dimension\nd3f_dxdy2 = (1, 2) # Compute derivative of order 1 in first dimension and der. of order 2 in second dimension\n# Instantiate derivative operators\ndiff1 = PartialDerivative.gaussian_derivative(order=df_dx, dim_shape=dim_shape, sigma=2.0)\ndiff2 = PartialDerivative.gaussian_derivative(order=d2f_dy2, dim_shape=dim_shape, sigma=2.0)\ndiff = PartialDerivative.gaussian_derivative(order=d3f_dxdy2, dim_shape=dim_shape, sigma=2.0)\n# Compute derivatives\nout1 = (diff1 * diff2)(image)\nout2 = diff(image)\nplt.figure()\nplt.imshow(image),\nplt.axis('off')\nplt.colorbar()\nplt.title('f(x,y)')\nplt.figure()\nplt.imshow(out1.T)\nplt.axis('off')\nplt.title(r'$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$')\nplt.figure()\nplt.imshow(out2.T)\nplt.axis('off')\nplt.title(r'$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Gradient\nfrom pyxu.util.misc import peaks\n\n# Define input image\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\ndim_shape = image.shape  # (1000, 1000)\n# Instantiate gradient operator\ngrad = Gradient(dim_shape=dim_shape)\n\n# Compute gradients\ndf_dx, df_dy = grad(image) # shape = (2, 1000, 1000)\n\n# Plot image\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\nim = axs[0].imshow(image)\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\nplt.colorbar(im, ax=axs[0])\n\n# Plot gradient\nim = axs[1].imshow(df_dx)\naxs[1].set_title(r\"$\\partial f/ \\partial x$\")\naxs[1].axis(\"off\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(df_dy)\naxs[2].set_title(r\"$\\partial f/ \\partial y$\")\naxs[2].axis(\"off\")\nplt.colorbar(im, ax=axs[2])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Jacobian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = np.tile(peaks(xx, yy), (3, 1, 1))\njac = Jacobian(dim_shape=image.shape)\nout = jac(image)\nfig, axes = plt.subplots(3, 2, figsize=(10, 15))\nfor i in range(3):\n   for j in range(2):\n       axes[i, j].imshow(out[i, j].T, cmap=[\"Reds\", \"Greens\", \"Blues\"][i])\n       axes[i, j].set_title(f\"$\\partial I_{{{['R', 'G', 'B'][j]}}}/\\partial{{{['x', 'y'][j]}}}$\")\nplt.suptitle(\"Jacobian\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Jacobian"
          ],
          "code_str": "Jacobian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Jacobian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "tile"
          ],
          "code_str": "np.tile",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.tile"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Jacobian"
          ],
          "code_str": "Jacobian",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.Jacobian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "suptitle"
          ],
          "code_str": "plt.suptitle",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.suptitle"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Gradient, Divergence, Laplacian\nfrom pyxu.util.misc import peaks\n\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\ndim_shape = image.shape  # (1000, 1000)\ngrad = Gradient(dim_shape=dim_shape)\ndiv = Divergence(dim_shape=dim_shape)\n# Construct Laplacian via composition\nlaplacian1 = div * grad\n# Compare to default Laplacian\nlaplacian2 = Laplacian(dim_shape=dim_shape)\noutput1 = laplacian1(image)\noutput2 = laplacian2(image)\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\nim = axes[0].imshow(np.log(abs(output1)).reshape(*dim_shape))\naxes[0].set_title(\"Laplacian via composition\")\nplt.colorbar(im, ax=axes[0])\nim = axes[1].imshow(np.log(abs(output1)).reshape(*dim_shape))\naxes[1].set_title(\"Default Laplacian\")\nplt.colorbar(im, ax=axes[1])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Divergence"
          ],
          "code_str": "Divergence",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Divergence"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Laplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Divergence"
          ],
          "code_str": "Divergence",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.Divergence"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.Laplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Hessian, PartialDerivative\nfrom pyxu.util.misc import peaks\n\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\ndim_shape = image.shape  # (1000, 1000)\n\n# Instantiate Hessian operator\nhessian = Hessian(dim_shape=dim_shape, directions=\"all\")\n# Compute Hessian\nd2f_dx2, d2f_dxdy, d2f_dy2 = hessian(image)\n\n# Plot\nfig, axs = plt.subplots(1, 4, figsize=(20, 4))\nim = axs[0].imshow(image)\nplt.colorbar(im, ax=axs[0])\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\n\nim = axs[1].imshow(d2f_dx2)\nplt.colorbar(im, ax=axs[1])\naxs[1].set_title(r\"$\\partial^{2} f/ \\partial x^{2}$\")\naxs[1].axis(\"off\")\n\nim = axs[2].imshow(d2f_dxdy)\nplt.colorbar(im, ax=axs[2])\naxs[2].set_title(r\"$\\partial^{2} f/ \\partial x\\partial y$\")\naxs[2].axis(\"off\")\n\nim = axs[3].imshow(d2f_dy2)\nplt.colorbar(im, ax=axs[3])\naxs[3].set_title(r\"$\\partial^{2} f/ \\partial y^{2}$\")\naxs[3].axis(\"off\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Hessian"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.Hessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Laplacian\nfrom pyxu.util.misc import peaks\n\n# Define input image\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\n\ndim_shape = image.shape  # (1000, 1000)\n# Compute Laplacian\nlaplacian = Laplacian(dim_shape=dim_shape)\noutput = laplacian(image) # shape = (1, 1000, 1000)\n\n# Plot\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\nim = axs[0].imshow(image)\nplt.colorbar(im, ax=axs[0])\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\n\nim = axs[1].imshow(output.squeeze())\nplt.colorbar(im, ax=axs[1])\naxs[1].set_title(r\"$\\partial^{2} f/ \\partial x^{2}+\\partial^{2} f/ \\partial y^{2}$\")\naxs[1].axis(\"off\")\n\nfig.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Laplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.Laplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalDerivative\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections = np.zeros(shape=(2, z.size))\ndirections[0, : z.size // 2] = 1\ndirections[1, z.size // 2:] = 1\ndop = DirectionalDerivative(dim_shape=z.shape, order=1, directions=directions)\nout = dop(z)\ndop2 = DirectionalDerivative(dim_shape=z.shape, order=2, directions=directions)\nout2 = dop2(z)\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\naxs = np.ravel(axs)\nh = axs[0].pcolormesh(xx, yy, z, shading=\"auto\")\naxs[0].quiver(x, x, directions[1].reshape(xx.shape), directions[0].reshape(xx.shape))\nplt.colorbar(h, ax=axs[0])\naxs[0].set_title(\"Signal and directions of first derivatives\")\n\nh = axs[1].pcolormesh(xx, yy, out.squeeze(), shading=\"auto\")\nplt.colorbar(h, ax=axs[1])\naxs[1].set_title(\"First-order directional derivatives\")\n\nh = axs[2].pcolormesh(xx, yy, out2.squeeze(), shading=\"auto\")\nplt.colorbar(h, ax=axs[2])\naxs[2].set_title(\"Second-order directional derivative\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.DirectionalDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.DirectionalDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.DirectionalDerivative"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "ravel"
          ],
          "code_str": "np.ravel",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.ravel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalGradient\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\ndim_shape = z.shape\ndop = DirectionalGradient(dim_shape=dim_shape, directions=[directions1, directions2])\nout = dop(z)\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(dim_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(dim_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title(r'Signal $\\mathbf{f}$ and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[0], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_0} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[1], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_1} \\mathbf{f}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalGradient"
          ],
          "code_str": "DirectionalGradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.DirectionalGradient"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalGradient"
          ],
          "code_str": "DirectionalGradient",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.DirectionalGradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalLaplacian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\ndim_shape = z.shape\ndop = DirectionalLaplacian(dim_shape=dim_shape, directions=[directions1, directions2])\nout = dop(z)\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(dim_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(dim_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title('Signal and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out.squeeze(), shading='auto')\nplt.colorbar(h)\nplt.title('Directional Laplacian')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalLaplacian"
          ],
          "code_str": "DirectionalLaplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.DirectionalLaplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalLaplacian"
          ],
          "code_str": "DirectionalLaplacian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.DirectionalLaplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalHessian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\ndim_shape = z.shape\nd_hess = DirectionalHessian(dim_shape=dim_shape, directions=[directions1, directions2])\nout = d_hess(z)\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(dim_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(dim_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title(r'Signal $\\mathbf{f}$ and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[0], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla^2_{\\mathbf{v}_0} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[1], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_0} \\nabla_{\\mathbf{v}_{1}} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[2], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla^2_{\\mathbf{v}_1} \\mathbf{f}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalHessian"
          ],
          "code_str": "DirectionalHessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.DirectionalHessian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalHessian"
          ],
          "code_str": "DirectionalHessian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.DirectionalHessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/operator/map": [],
  "api/opt.solver": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.operator as pxo\nfrom pyxu.operator import SubSample, PartialDerivative\nfrom pyxu.opt.solver import CV\n\nx = np.repeat(np.asarray([0, 2, 1, 3, 0, 2, 0]), 10)\nN = x.size\n\nD = PartialDerivative.finite_difference(dim_shape=(N,), order=(1,))\n\ndownsample = SubSample(N, slice(None, None, 3))\ny = downsample(x)\nloss = (1 / 2) * pxo.SquaredL2Norm(y.size).argshift(-y)\nF = loss * downsample\n\ncv = CV(f=F, g=0.01 * pxo.L1Norm(N), h=0.1 * pxo.L1Norm((N)), K=D)\nx0, z0 = np.zeros((2, N))\ncv.fit(x0=x0, z0=z0)\nx_recons = cv.solution()\n\nplt.figure()\nplt.stem(x, linefmt=\"C0-\", markerfmt=\"C0o\")\nmask_ids = np.where(downsample.adjoint(np.ones_like(y)))[0]\nmarkerline, stemlines, baseline = plt.stem(mask_ids, y, linefmt=\"C3-\", markerfmt=\"C3o\")\nmarkerline.set_markerfacecolor(\"none\")\nplt.stem(x_recons, linefmt=\"C1--\", markerfmt=\"C1s\")\nplt.legend([\"Ground truth\", \"Observation\", \"CV Estimate\"])\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample"
          ],
          "code_str": "SubSample",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV"
          ],
          "code_str": "CV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "repeat"
          ],
          "code_str": "np.repeat",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.repeat"
        },
        {
          "import_components": [
            "slice"
          ],
          "code_str": "slice",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "slice"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample"
          ],
          "code_str": "SubSample",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV"
          ],
          "code_str": "CV",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV",
            "()"
          ],
          "code_str": "cv",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "numpy",
            "ones_like"
          ],
          "code_str": "np.ones_like",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.ones_like"
        },
        {
          "import_components": [
            "numpy",
            "where"
          ],
          "code_str": "np.where",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.where"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/opt.solver",
        "ref_id": "id18",
        "headings": [
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.operator as pxo\nfrom pyxu.operator import SubSample, PartialDerivative\nfrom pyxu.opt.solver import PD3O\n\nx = np.repeat(np.asarray([0, 2, 1, 3, 0, 2, 0]), 10)\nN = x.size\n\nD = PartialDerivative.finite_difference(dim_shape=(N,), order=(1,))\n\ndownsample = SubSample(N, slice(None, None, 3))\ny = downsample(x)\nloss = (1 / 2) * pxo.SquaredL2Norm(y.size).argshift(-y)\nF = loss * downsample\n\npd3o = PD3O(f=F, g=0.01 * pxo.L1Norm(N), h=0.1 * pxo.L1Norm((N)), K=D)\nx0, z0 = np.zeros((2, N))\npd3o.fit(x0=x0, z0=z0)\nx_recons = pd3o.solution()\n\nplt.figure()\nplt.stem(x, linefmt=\"C0-\", markerfmt=\"C0o\")\nmask_ids = np.where(downsample.adjoint(np.ones_like(y)))[0]\nmarkerline, stemlines, baseline = plt.stem(mask_ids, y, linefmt=\"C3-\", markerfmt=\"C3o\")\nmarkerline.set_markerfacecolor(\"none\")\nplt.stem(x_recons, linefmt=\"C1--\", markerfmt=\"C1s\")\nplt.legend([\"Ground truth\", \"Observation\", \"PD3O Estimate\"])\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample"
          ],
          "code_str": "SubSample",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "repeat"
          ],
          "code_str": "np.repeat",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.repeat"
        },
        {
          "import_components": [
            "slice"
          ],
          "code_str": "slice",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "slice"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample"
          ],
          "code_str": "SubSample",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SubSample",
            "()"
          ],
          "code_str": "downsample",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.select.SubSample"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()"
          ],
          "code_str": "pd3o",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "numpy",
            "ones_like"
          ],
          "code_str": "np.ones_like",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.ones_like"
        },
        {
          "import_components": [
            "numpy",
            "where"
          ],
          "code_str": "np.where",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.where"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/opt.solver",
        "ref_id": "id26",
        "headings": [
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.abc as pxa\nimport pyxu.operator as pxo\nimport scipy as sp\nfrom pyxu.opt.solver import ADMM\n\nN = 100  # Dimension of the problem\n\n# Generate piecewise-linear ground truth\nx_gt = np.array([10, 25, 60, 90])  # Knot locations\na_gt = np.array([2, -4, 3, -2])  # Amplitudes of the knots\ngt = np.zeros(N)  # Ground-truth signal\nfor n in range(len(x_gt)):\n    gt[x_gt[n] :] += a_gt[n] * np.arange(N - x_gt[n]) / N\n\n# Generate data (noisy samples at random locations)\nM = 20  # Number of data points\nrng = np.random.default_rng(seed=0)\nx_samp = rng.choice(np.arange(N // M), size=M) + np.arange(N, step=N // M)  # sampling locations\nsigma = 2 * 1e-2  # noise variance\ny = gt[x_samp] + sigma * rng.standard_normal(size=M)  # noisy data points\n\n# Data-fidelity term\nsubsamp_mat = sp.sparse.lil_matrix((M, N))\nfor i in range(M):\n    subsamp_mat[i, x_samp[i]] = 1\nG = pxa.LinOp.from_array(subsamp_mat.tocsr())\nF = 1 / 2 * pxo.SquaredL2Norm(dim=y.size).argshift(-y) * G\nF.diff_lipschitz = F.estimate_diff_lipschitz(method=\"svd\")\n\n# Regularization term (promotes sparse second derivatives)\nderiv_mat = sp.sparse.diags(diagonals=[1, -2, 1], offsets=[0, 1, 2], shape=(N - 2, N))\nD = pxa.LinOp.from_array(deriv_mat)\n_lambda = 1e-1  # regularization parameter\nH = _lambda * pxo.L1Norm(dim=D.codim)\n\n# Solver for ADMM\ntau = 1 / _lambda  # internal ADMM parameter\n# Inverse operator to solve the linear system\nA_inv = sp.linalg.inv(G.gram().asarray() + (1 / tau) * D.gram().asarray())\n\ndef solver_ADMM(arr, tau):\n    b = (1 / tau) * D.adjoint(arr) + G.adjoint(y)\n    return A_inv @ b.squeeze()\n\n\n# Solve optimization problem\nadmm = ADMM(f=F, h=H, K=D, solver=solver_ADMM,show_progress=False)  # with solver\nadmm.fit(x0=np.zeros(N), tau=tau)\nx_opt = admm.solution()  # reconstructed signal\n\n# Plots\nplt.figure()\nplt.plot(np.arange(N), gt, label=\"Ground truth\")\nplt.plot(x_samp, y, \"kx\", label=\"Noisy data points\")\nplt.plot(np.arange(N), x_opt, label=\"Reconstructed signal\")\nplt.legend()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM"
          ],
          "code_str": "ADMM",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix"
          ],
          "code_str": "sp.sparse.lil_matrix",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix",
            "()"
          ],
          "code_str": "subsamp_mat",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix",
            "()"
          ],
          "code_str": "subsamp_mat",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "diags"
          ],
          "code_str": "sp.sparse.diags",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "scipy.sparse.diags"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "scipy",
            "linalg",
            "inv"
          ],
          "code_str": "sp.linalg.inv",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "scipy.linalg.inv"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM"
          ],
          "code_str": "ADMM",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM",
            "()"
          ],
          "code_str": "admm",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        }
      ],
      "example": {
        "document": "api/opt.solver",
        "ref_id": "id59",
        "headings": [
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/opt.stop": [],
  "api/runtime": [],
  "api/util": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-3, 3, 1000)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\nplt.figure()\nplt.imshow(z)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        }
      ],
      "example": {
        "document": "api/util",
        "ref_id": "pyxu-util-misc",
        "headings": [
          "pyxu.util",
          "Table of Contents",
          "pyxu.util.misc"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.util.misc import star_like_sample\n\nstar = star_like_sample(N=256, w=8, s=20, po=3, x0=0.7)\nplt.figure()\nplt.imshow(star)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "star_like_sample"
          ],
          "code_str": "star_like_sample",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.star_like_sample"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "star_like_sample"
          ],
          "code_str": "star_like_sample",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.util.misc.star_like_sample"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        }
      ],
      "example": {
        "document": "api/util",
        "ref_id": "pyxu-util-misc",
        "headings": [
          "pyxu.util",
          "Table of Contents",
          "pyxu.util.misc"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "examples/contributing": [
    {
      "source": "try:\n    from pyxu.opt.solver import GradientDescent\nexcept ImportError as e:\n    print(e)",
      "names": [
        {
          "import_components": [
            "ImportError"
          ],
          "code_str": "ImportError",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "ImportError"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "examples/contributing",
        "ref_id": "Step-1:-Attempting-to-Import-Before-Installation",
        "headings": [
          "Using Contributed Plugins in Pyxu",
          "Step 1: Attempting to Import Before Installation"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "!pip install pyxu-gradient-descent",
      "names": [],
      "example": {
        "document": "examples/contributing",
        "ref_id": "Step-2:-Installing-the-Plugin",
        "headings": [
          "Using Contributed Plugins in Pyxu",
          "Step 2: Installing the Plugin"
        ]
      },
      "doc_lineno": 42
    },
    {
      "source": "from pyxu.operator import SquaredL2Norm\nfrom pyxu.opt.solver import GradientDescent\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "examples/contributing",
        "ref_id": "Step-3:-Importing-the-Necessary-Objects",
        "headings": [
          "Using Contributed Plugins in Pyxu",
          "Step 3: Importing the Necessary Objects"
        ]
      },
      "doc_lineno": 51
    },
    {
      "source": "# Define the dimension\nN = 100\n\n# Generate random data\nrng = np.random.default_rng(seed=0)\ny = rng.uniform(size=N)\n\n# Define the loss function\nloss = SquaredL2Norm(dim_shape=(N, )).asloss(y)\n\n# Initialize the gradient descent algorithm\ngd = GradientDescent(f=loss)\n\n# Define the initial point\nx0 = np.random.randn(N)\n\n# Run the gradient descent algorithm\ngd.fit(x0=x0, acceleration=True)\n\n# Check the solution\nassert np.allclose(gd.solution(), y)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/contributing",
        "ref_id": "Step-4:-Using-the-Gradient-Descent-Algorithm",
        "headings": [
          "Using Contributed Plugins in Pyxu",
          "Step 4: Using the Gradient Descent Algorithm"
        ]
      },
      "doc_lineno": 74
    }
  ],
  "examples/deblur": [
    {
      "source": "# Importing necessary libraries and modules\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport skimage\nfrom pyxu.operator import Convolve, L21Norm, Gradient, SquaredL2Norm, PositiveOrthant\nfrom pyxu.opt.solver import PD3O\nfrom pyxu.opt.stop import RelError, MaxIter\n\n# Setting up GPU support\nGPU = False\nif GPU:\n    import cupy as xp\nelse:\n    import numpy as xp",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm"
          ],
          "code_str": "L21Norm",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant"
          ],
          "code_str": "PositiveOrthant",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "RelError",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "MaxIter",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "cupy"
          ],
          "code_str": "cupy",
          "lineno": 12,
          "end_lineno": 12,
          "context": "import_target",
          "resolved_location": "cupy"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 14,
          "end_lineno": 14,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Total-Variation-based-Bayesian-Image-Deblurring",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "!pip install scikit-image",
      "names": [],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Loading-and-Preprocessing-the-Image",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "Loading and Preprocessing the Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Loading and preprocessing the image\ndata = skimage.data.coffee()\nskimage.io.imshow(data)\ndata = xp.asarray(data.astype(\"float32\") / 255.0).transpose(2, 0, 1)",
      "names": [
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "xp.asarray",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.asarray"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Loading-and-Preprocessing-the-Image",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "Loading and Preprocessing the Image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Creating the Gaussian blurring kernel\nsigma = 7\nwidth = 13\nmu = (width - 1) / 2\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - mu) ** 2) / (sigma**2)\n)\n\nkernel_1d = np.fromfunction(gauss, (width,)).reshape(1, -1)\nkernel_1d /= kernel_1d.sum()\n\nkernel_1d = xp.asarray(kernel_1d)",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "xp.asarray",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.asarray"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Creating-the-Blurring-Kernel",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "Creating the Blurring Kernel"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Applying the blurring and adding noise\nconv = Convolve(\n    dim_shape=data.shape,\n    kernel=[xp.array([1]), kernel_1d, kernel_1d],\n    center=[0, width // 2, width // 2],\n    mode=\"reflect\",\n    enable_warnings=True,\n)\ny = conv(data)\ny = xp.random.normal(loc=y, scale=0.05)\ny = y.clip(0, 1)\nskimage.io.imshow(y.transpose(1,2,0))",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "xp.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "xp.random.normal",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Applying-the-Blurring-and-Adding-Noise",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "Applying the Blurring and Adding Noise"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Setting up the MAP approach with total variation prior and positivity constraint\nsl2 = SquaredL2Norm(dim_shape=y.shape).argshift(-y)\nloss = sl2 * conv\n\nl21 = L21Norm(dim_shape=(2, *y.shape), l2_axis=(0, 1))\n\ngrad = Gradient(\n    dim_shape=y.shape,\n    directions=(1, 2),\n    gpu=GPU,\n    diff_method=\"fd\",\n    scheme=\"central\",\n    accuracy=3,\n)\n\nstop_crit = RelError(\n            eps=1e-6,\n            var=\"x\",\n            f=None,\n            norm=2,\n            satisfy_all=True,\n        ) | MaxIter(5000)\n\npositivity = PositiveOrthant(dim_shape=y.shape)\nsolver = PD3O(f=loss, g=positivity, h= 3e-2 * l21, K=grad, verbosity=500)\nsolver.fit(x0=y, stop_crit=stop_crit)\n\n# Getting the deblurred image\nrecons = solver.solution()\nrecons /= recons.max()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm"
          ],
          "code_str": "L21Norm",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm",
            "()"
          ],
          "code_str": "l21",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "RelError",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "MaxIter",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant"
          ],
          "code_str": "PositiveOrthant",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant",
            "()"
          ],
          "code_str": "positivity",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant",
            "()"
          ],
          "code_str": "positivity",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L21Norm",
            "()"
          ],
          "code_str": "l21",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L21Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()"
          ],
          "code_str": "solver",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "MAP-Estimate-with-Composite-Positivity-+-Total-Variation-Prior",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "MAP Estimate with Composite Positivity + Total Variation Prior"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "skimage.io.imshow(recons.transpose(1,2,0))",
      "names": [],
      "example": {
        "document": "examples/deblur",
        "ref_id": "MAP-Estimate-with-Composite-Positivity-+-Total-Variation-Prior",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "MAP Estimate with Composite Positivity + Total Variation Prior"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Evaluating the deblurred image\nfrom skimage.metrics import structural_similarity as ssim\nfrom skimage.metrics import mean_squared_error as mse\nfrom skimage.metrics import peak_signal_noise_ratio as psnr\n\nif GPU:\n    data = data.get()\n    y = y.get()\n    recons = recons.get()\n\ndata = data.transpose(1, 2, 0)\ny = y.transpose(1, 2, 0)\nrecons = recons.clip(0,1)\nrecons = recons.transpose(1, 2, 0)\n\nmse_y = mse(data, y)\nssim_y = ssim(data, y, channel_axis=2, data_range=1.)\npsnr_y = psnr(data, y, data_range=1.)\nmse_recons = mse(data, recons)\nssim_recons = ssim(data, recons, channel_axis=2, data_range=1.)\npsnr_recons = psnr(data, recons, data_range=1.)",
      "names": [],
      "example": {
        "document": "examples/deblur",
        "ref_id": "MAP-Estimate-with-Composite-Positivity-+-Total-Variation-Prior",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "MAP Estimate with Composite Positivity + Total Variation Prior"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Visualizing the results\n\nplt.figure(figsize=(15, 11))\n\nplt.subplot(2,2,1)\nplt.imshow(data.clip(0,1))\nplt.title(\"Original Image\")\nplt.axis('off')\n\nplt.subplot(2,2,2)\nplt.imshow(y.clip(0, 1))\nplt.title(f\"Blurred and Noisy Image\\nMSE: {mse_y:.2f}, SSIM: {ssim_y:.2f}, PSNR: {psnr_y:.2f}\")\nplt.axis('off')\n\nplt.subplot(2,2,3)\nplt.imshow(recons)\nplt.title(f\"Deblurred Image\\nMSE: {mse_recons:.2f}, SSIM: {ssim_recons:.2f}, PSNR: {psnr_recons:.2f}\")\nplt.axis('off')\n\nplt.tight_layout()\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "tight_layout"
          ],
          "code_str": "plt.tight_layout",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.tight_layout"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/deblur",
        "ref_id": "Visualizing-the-Results",
        "headings": [
          "Total-Variation based Bayesian Image Deblurring",
          "Visualizing the Results"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/index": [],
  "examples/sg_execution_times": [],
  "examples/stencils": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport skimage\nfrom pyxu.operator import Convolve",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": null,
        "headings": []
      },
      "doc_lineno": null
    },
    {
      "source": "npix = 128\ndata = skimage.data.binary_blobs(\n    length=npix,\n    blob_size_fraction=0.5,\n    n_dim=2,\n    volume_fraction=0.2,\n).astype(float)",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Create-input-image",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create input image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "sigma = 2  # Gaussian kernel std\nwidth = 11  # Length of the Graussian kernel\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - (width - 1) / 2) ** 2) / (sigma**2)\n)\nkernel_1d = np.fromfunction(gauss, (width,))\nkernel_2d = np.outer(kernel_1d.reshape(-1, 1), kernel_1d.reshape(1, -1))",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "numpy",
            "outer"
          ],
          "code_str": "np.outer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.outer"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Create-blurring-kernel",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create blurring kernel"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\naxs[0].imshow(data)\naxs[0].set_title(\"Original image\")\n\naxs[1].plot(kernel_1d)\naxs[1].set_title(\"1D Gaussian kernel\")\n\naxs[2].imshow(kernel_2d)\naxs[2].set_title(\"2D Gaussian kernel\")\n\nfig.tight_layout();",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Create-blurring-kernel",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create blurring kernel"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scipy.signal import convolve as conv_scipy\n\n# Direct 2D convolution\ny = conv_scipy(data, kernel_2d, mode=\"same\", method=\"direct\")",
      "names": [
        {
          "import_components": [
            "scipy",
            "signal"
          ],
          "code_str": "scipy.signal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "scipy.signal"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "convolve",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Scipy",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scipy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution ...\n\nconvolved_rows = conv_scipy(  # ... along rows\n    data,\n    kernel_1d[:, np.newaxis],\n    mode=\"same\",\n    method=\"direct\",\n)\n\ny_separable = conv_scipy(  # ... then along columns\n    convolved_rows,\n    kernel_1d[np.newaxis, :],\n    mode=\"same\",\n    method=\"direct\",\n)\n\nassert np.allclose(y, y_separable)",
      "names": [
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Scipy",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scipy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "conv = Convolve(\n    dim_shape=data.shape,\n    kernel=[kernel_1d, kernel_1d],\n    center=[width // 2, width // 2],\n    mode=\"constant\",\n    enable_warnings=True,\n)\ny_pyxu = conv(data)\n\nassert np.allclose(y, y_pyxu)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Pyxu",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Pyxu"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "!pip install pylops",
      "names": [],
      "example": {
        "document": "examples/stencils",
        "ref_id": "PyLops",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "PyLops"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator.interop import from_sciop\nimport pyxu.abc as pxa\n\nfrom pylops.signalprocessing import Convolve2D\n\n# 2d convolution\nconv_pylops = from_sciop(\n    cls=pxa.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_2d,\n        offset=np.r_[width // 2, width // 2],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\ny_pylops = conv_pylops(data.ravel()).reshape(data.shape)\nassert np.allclose(y, y_pylops)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "PyLops",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "PyLops"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution\nconv_pylops_rows = from_sciop(\n    cls=pxa.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_1d[np.newaxis, :],\n        offset=np.r_[0, width // 2],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\nconv_pylops_cols = from_sciop(\n    cls=pxa.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_1d[:, np.newaxis],\n        offset=np.r_[width // 2, 0],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\n\ny_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(data.shape)\nassert np.allclose(y, y_pylops)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "PyLops",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "PyLops"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "!pip install scico",
      "names": [],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Scico",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scico"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scico.linop import Convolve as Conv_scico\nfrom jax import config\nimport jax.numpy as jnp\n\n# Convert data and kernel from Numpy to Jax\ndata_jax = jnp.asarray(data)\nk2d_jax = jnp.asarray(kernel_2d)\nconfig.update(\"jax_enable_x64\", True)\n\n# 2d convolution\nconv_scico = Conv_scico(\n    k2d_jax,\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\ny_scico = conv_scico(data_jax)\nassert np.allclose(y, y_scico)",
      "names": [
        {
          "import_components": [
            "jax",
            "config"
          ],
          "code_str": "config",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "jax.config"
        },
        {
          "import_components": [
            "jax",
            "numpy"
          ],
          "code_str": "jax.numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "jax.numpy"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Scico",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scico"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution\nk1d_jax = jnp.asarray(kernel_1d)\n\nconv_scico_rows = Conv_scico(\n    k1d_jax[np.newaxis, :],\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\nconv_scico_cols = Conv_scico(\n    k1d_jax[:, np.newaxis],\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\ny_scico = conv_scico_cols(conv_scico_rows(data_jax))\nassert np.allclose(y, y_scico)",
      "names": [
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Scico",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scico"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "!pip install tqdm",
      "names": [],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Separable-1d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Separable 1d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import time\nimport tqdm\n\nnpixs = [2**i for i in range(6, 10)]\nnwidths = [2**i + 1 for i in range(3, 8)]\n\nt_pyxu = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scipy = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_pylops = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scico = np.full((2, len(npixs), len(nwidths)), np.nan)\n\nsigma = 2\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - (width - 1) / 2) ** 2) / (sigma**2)\n)\n\nnreps = 5\n\nwith tqdm.tqdm(total=len(npixs) * len(nwidths)) as pbar:\n    for i, npix in enumerate(npixs):\n        x = skimage.data.binary_blobs(\n            length=npix, blob_size_fraction=0.5, n_dim=2, volume_fraction=0.2\n        ).astype(float)\n        for j, width in enumerate(nwidths):\n            if npix > (width * 2):\n                kernel = np.fromfunction(gauss, (width,))\n                data_jax = jnp.asarray(data)\n                k1d_jax = jnp.asarray(kernel_1d)\n\n                ## PYXU\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pyxu = Convolve(\n                    dim_shape=data.shape,\n                    kernel=[kernel, kernel],\n                    center=[width // 2, width // 2],\n                    mode=\"constant\",\n                    enable_warnings=True,\n                )\n                y = conv_pyxu(data)\n                t_pyxu[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y = conv_pyxu(data)\n                    times += time.perf_counter() - tic\n\n                t_pyxu[1, i, j] = times / nreps\n\n                ## SCIPY\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                convolved_rows = conv_scipy(\n                    data, kernel_1d[:, np.newaxis], mode=\"same\", method=\"direct\"\n                )  # Along rows\n                y_scipy = conv_scipy(\n                    convolved_rows,\n                    kernel_1d[np.newaxis, :],\n                    mode=\"same\",\n                    method=\"direct\",\n                )  # Along columns\n\n                t_scipy[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    convolved_rows = conv_scipy(\n                        data, kernel_1d[:, np.newaxis], mode=\"same\", method=\"direct\"\n                    )  # Along rows\n                    y_scipy = conv_scipy(\n                        convolved_rows,\n                        kernel_1d[np.newaxis, :],\n                        mode=\"same\",\n                        method=\"direct\",\n                    )  # Along columns\n                    times += time.perf_counter() - tic\n\n                t_scipy[1, i, j] = times / nreps\n\n                ## PYLOPS\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pylops_rows = from_sciop(\n                    cls=pxa.LinOp,\n                    sp_op=Convolve2D(\n                        dims=data.shape,\n                        h=kernel_1d[np.newaxis, :],\n                        offset=np.r_[0, width // 2],\n                        axes=(0, 1),\n                        method=\"direct\",\n                    ),\n                )\n                conv_pylops_cols = from_sciop(\n                    cls=pxa.LinOp,\n                    sp_op=Convolve2D(\n                        dims=data.shape,\n                        h=kernel_1d[:, np.newaxis],\n                        offset=np.r_[width // 2, 0],\n                        axes=(0, 1),\n                        method=\"direct\",\n                    ),\n                )\n\n                y_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(\n                    data.shape\n                )\n                t_pylops[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(\n                        data.shape\n                    )\n                    times += time.perf_counter() - tic\n                t_pylops[1, i, j] = times / nreps\n\n                ## SCICO\n\n                # Instantation + first run time\n\n                tic = time.perf_counter()\n                config.update(\"jax_enable_x64\", True)\n\n                conv_scico_rows = Conv_scico(\n                    k1d_jax[np.newaxis, :],\n                    input_shape=data_jax.shape,\n                    input_dtype=data_jax.dtype,\n                    mode=\"same\",\n                    jit=True,\n                )\n                conv_scico_cols = Conv_scico(\n                    k1d_jax[:, np.newaxis],\n                    input_shape=data_jax.shape,\n                    input_dtype=data_jax.dtype,\n                    mode=\"same\",\n                    jit=True,\n                )\n                y_scico = conv_scico_cols(conv_scico_rows(data_jax))\n                t_scico[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_scico = conv_scico_cols(conv_scico_rows(data_jax))\n                    times += time.perf_counter() - tic\n                t_scico[1, i, j] = times / nreps\n            pbar.update(1)",
      "names": [
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 91,
          "end_lineno": 91,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 90,
          "end_lineno": 90,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 101,
          "end_lineno": 101,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 105,
          "end_lineno": 105,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.from_sciop"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 114,
          "end_lineno": 114,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 118,
          "end_lineno": 118,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 119,
          "end_lineno": 119,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 123,
          "end_lineno": 123,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 130,
          "end_lineno": 130,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 148,
          "end_lineno": 148,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 152,
          "end_lineno": 152,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 153,
          "end_lineno": 153,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 155,
          "end_lineno": 155,
          "context": "none",
          "resolved_location": "time.perf_counter"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Separable-1d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Separable 1d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(2, 4, figsize=(15, 5))\nim = axs[0, 0].imshow(np.log10(t_pyxu[0]))\naxs[0, 0].set_title(\"pyxu: t-init\")\nplt.colorbar(im, ax=axs[0, 0])\n\nim = axs[0, 1].imshow(np.log10(t_scipy[0]))\naxs[0, 1].set_title(\"scipy: t-init\")\nplt.colorbar(im, ax=axs[0, 1])\n\nim = axs[0, 2].imshow(np.log10(t_pylops[0]))\naxs[0, 2].set_title(\"pylops: t-init\")\nplt.colorbar(im, ax=axs[0, 2])\n\n\nim = axs[0, 3].imshow(np.log10(t_scico[0]))\naxs[0, 3].set_title(\"scico: t-init\")\nplt.colorbar(im, ax=axs[0, 3])\n\nim = axs[1, 0].imshow(np.log10(t_pyxu[1]))\naxs[1, 0].set_title(\"pyxu: t-run\")\nplt.colorbar(im, ax=axs[1, 0])\n\nim = axs[1, 1].imshow(np.log10(t_scipy[1]))\naxs[1, 1].set_title(\"scipy: t-run\")\nplt.colorbar(im, ax=axs[1, 1])\n\nim = axs[1, 2].imshow(np.log10(t_pylops[1]))\naxs[1, 2].set_title(\"pylops: t-run\")\nplt.colorbar(im, ax=axs[1, 2])\n\nim = axs[1, 3].imshow(np.log10(t_scico[1]))\naxs[1, 3].set_title(\"scico: t-run\")\nplt.colorbar(im, ax=axs[1, 3])\n\nfor ax in axs.ravel():\n    ax.set_xticks(np.arange(len(nwidths)))\n    ax.set_xticklabels(nwidths)\n    ax.set_xlabel(\"Kernel width (1D)\")\n    ax.set_yticks(np.arange(len(npixs)))\n    ax.set_yticklabels(npixs)\n    ax.set_ylabel(\"N-pixels (1D)\")\n\nfig.suptitle(\n    f\"2D convolution (time in log-scale: t-init includes JIT compilation, t-run is the mean runtime across {nreps} reps)\"\n)\nfig.tight_layout();",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Separable-1d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Separable 1d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(2, 4, figsize=(15, 5))\n\nim = axs[0, 0].imshow(np.log10(t_pyxu[0]))\naxs[0, 0].set_title(\"pyxu: t-init\")\nplt.colorbar(im, ax=axs[0, 0])\n\nim = axs[0, 1].imshow(np.log10(t_scipy[0]))\naxs[0, 1].set_title(\"scipy: t-init\")\nplt.colorbar(im, ax=axs[0, 1])\n\nim = axs[0, 2].imshow(np.log10(t_pylops[0]))\naxs[0, 2].set_title(\"pylops: t-init\")\nplt.colorbar(im, ax=axs[0, 2])\n\n\nim = axs[0, 3].imshow(np.log10(t_scico[0]))\naxs[0, 3].set_title(\"scico: t-init\")\nplt.colorbar(im, ax=axs[0, 3])\n\nim = axs[1, 0].imshow(np.log10(t_pyxu[1]))\naxs[1, 0].set_title(\"pyxu: t-run\")\nplt.colorbar(im, ax=axs[1, 0])\n\nim = axs[1, 1].imshow(np.log10(t_scipy[1]))\naxs[1, 1].set_title(\"scipy: t-run\")\nplt.colorbar(im, ax=axs[1, 1])\n\nim = axs[1, 2].imshow(np.log10(t_pylops[1]))\naxs[1, 2].set_title(\"pylops: t-run\")\nplt.colorbar(im, ax=axs[1, 2])\n\nim = axs[1, 3].imshow(np.log10(t_scico[1]))\naxs[1, 3].set_title(\"scico: t-run\")\nplt.colorbar(im, ax=axs[1, 3])\n\nfor ax in axs.ravel():\n    ax.set_xticks(np.arange(len(nwidths)))\n    ax.set_xticklabels(nwidths)\n    ax.set_xlabel(\"Kernel width (1D)\")\n    ax.set_yticks(np.arange(len(npixs)))\n    ax.set_yticklabels(npixs)\n    ax.set_ylabel(\"N-pixels (1D)\")\n\nfig.suptitle(\n    f\"2D convolution (time in log-scale: t-init includes JIT compilation, t-run is the mean runtime across {nreps} reps)\"\n)\nfig.tight_layout();",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/stencils",
        "ref_id": "Direct-2d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Direct 2d convolution"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/xray": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy as sp\nimport skimage as ski\nimport warnings as warn\nimport pyxu.operator as pxo\n\nwarn.filterwarnings(\"ignore\")\nplt.style.use(\"seaborn-v0_8-darkgrid\")\nplt.rcParams[\"figure.figsize\"] = [4, 4]\nplt.rcParams[\"figure.dpi\"] = 300\nplt.rcParams[\"axes.grid\"] = True\nplt.rcParams[\"image.cmap\"] = \"Greys\"\nplt.rcParams['axes.labelsize'] = 6\nplt.rcParams['axes.titlesize'] = 8\nplt.rcParams[\"xtick.labelsize\"] = 6\nplt.rcParams[\"ytick.labelsize\"] = 6",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "warnings"
          ],
          "code_str": "warnings",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "warnings"
        },
        {
          "import_components": [
            "warnings",
            "filterwarnings"
          ],
          "code_str": "warn.filterwarnings",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "warnings.filterwarnings"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Advanced-Computerized-Tomography-with-Pyxu",
        "headings": [
          "Advanced Computerized Tomography with Pyxu"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def create_2D_phantom(shape: tuple[int], seed: int) -> np.ndarray:\n    # in: (N_h, N_w) phantom dimensions [px]\n    # out: (N_h, N_w) phantom\n    import xdesign as xd\n\n    np.random.seed(seed)\n    substrate = xd.Foam(size_range=[0.1, 0.01], gap=0.025, porosity=0.5)\n    I = xd.discrete_phantom(substrate, np.mean(shape, dtype=int))  # produce image at average resolution\n    I = np.pad(I, int(0.05 * I.shape[0]))  # 5% axial pad\n\n    I = ski.transform.rescale(I, scale=np.array(shape) / I.shape[0])  # rescale to user dimensions\n    I = (I - I.min()) / I.ptp()\n    return I\n\nN_side = 300  # N_px = N_side**2\npitch = 1e-4  # m/px [can differ per axis]\nphantom = create_2D_phantom(shape=(N_side, N_side), seed=5)\nim_kwargs = dict(\n    origin=\"lower\",\n    extent=[0, N_side * pitch, 0, N_side * pitch],\n)\n\nfig, ax = plt.subplots()\nim = ax.imshow(phantom, **im_kwargs)\nfig.colorbar(im)\nax.set_xlabel(\"x [m]\")\nax.set_ylabel(\"y [m]\")\nax.set_title(\"Phantom\")",
      "names": [
        {
          "import_components": [
            "numpy",
            "ndarray"
          ],
          "code_str": "np.ndarray",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.ndarray"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "pad"
          ],
          "code_str": "np.pad",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.pad"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "2D-Imaging",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "N_angle = 100\nN_offset = 200\n\n# Let's build the necessary components to instantiate the operator. ========================\nangle = np.linspace(0, np.pi, N_angle, endpoint=False)\nn = np.stack([np.cos(angle), np.sin(angle)], axis=1)\n\nt = n[:, [1, 0]] * np.r_[-1, 1]  # <n, t> = 0\nt_max = pitch * N_side / 2 * 1.1  # 10% over ball radius\nt_offset = np.linspace(-t_max, t_max, N_offset, endpoint=True)\n\nn_spec = np.broadcast_to(n.reshape(N_angle, 1, 2), (N_angle, N_offset, 2))  # (N_angle, N_offset, 2)\nt_spec = t.reshape(N_angle, 1, 2) * t_offset.reshape(N_offset, 1)  # (N_angle, N_offset, 2)\nt_spec += pitch * N_side / 2  # Move anchor point to the center of volume.\n# ==========================================================================================\n\nop_para_u = pxo.RayXRT(\n    dim_shape=(N_side, N_side),\n    origin=0,  # bottom-left corner of volume located at (0, 0)\n    pitch=pitch,  # pixel dimensions. (Can vary per axis.)\n    n_spec=n_spec.reshape(-1, 2),  # (N_ray, 2) directions\n    t_spec=t_spec.reshape(-1, 2),  # (N_ray, 2)\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "stack"
          ],
          "code_str": "np.stack",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.stack"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "broadcast_to"
          ],
          "code_str": "np.broadcast_to",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.broadcast_to"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Parallel-Beam:-Uniform-Offsets",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Parallel Beam: Uniform Offsets"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "N, K = 10, 20\nray_idx = np.arange(N_angle * N_offset).reshape(N_angle, N_offset)[::N,::K]\n\nfig = op_para_u.diagnostic_plot(ray_idx)\nfig.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Parallel-Beam:-Uniform-Offsets",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Parallel Beam: Uniform Offsets"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Compute sinogram\nsinogram = op_para_u.apply(phantom).reshape(N_angle, N_offset)  # (N_angle, N_offset)\n\n\n# And plot it\nN_level = 50\nfig, ax = plt.subplots()\nANGLE, OFFSET = np.meshgrid(angle, t_offset, indexing=\"ij\")\ncontour = ax.contourf(\n    ANGLE,\n    OFFSET,\n    sinogram,\n    levels=np.linspace(0, sinogram.max(), N_level),\n    cmap='grey',\n)\ncbar = fig.colorbar(contour, ax=ax)\nax.set_xlabel(r\"$\\angle \\mathbf{n}$\")\nax.set_xticks(\n    ticks=[0, np.pi/2, np.pi],\n    labels=[\"0\", r\"$\\frac{\\pi}{2}$\", r\"$\\pi$\"],\n)\nax.set_ylabel(r\"lateral offset [m]\")\nax.set_yticks(\n    ticks=[t_offset.min(), 0, t_offset.max()],\n    labels=None,\n);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.pi"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Parallel-Beam:-Uniform-Offsets",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Parallel Beam: Uniform Offsets"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Compute backprojected image and LSQ image. =======================\nI_BP = op_para_u.adjoint(sinogram.reshape(-1))\nI_LSQ = op_para_u.pinv(sinogram.reshape(-1), damp=0)\n\n# Plot the images ==================================================\nfig, ax = plt.subplots(1, 3, figsize=[4, 6])\nax[0].imshow(phantom, **im_kwargs)\nax[1].imshow(I_BP, **im_kwargs)\nax[2].imshow(I_LSQ, **im_kwargs)\nax[0].set_title(\"Ground-Truth\")\nax[1].set_title(\"BackProj\")\nax[2].set_title(\"LS\")\nfor _ax in ax:\n    _ax.axis(\"off\")\n\n# aliases to compare against fan-beam later on.\nI_BP_u = I_BP\nI_LSQ_u = I_LSQ",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Parallel-Beam:-Uniform-Offsets",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Parallel Beam: Uniform Offsets"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# In the parallel-beam setups above, we had fixed `origin=0` and shifted `t_spec` to be centered at the volume\n# mid-point, i.e. (N_side * pitch / 2). For fan-beam, it is easier to center the volume at the origin of the reference\n# system, i.e. `origin = -(N_side * pitch / 2)`, and define `n/t_spec` for one source position. Subsequent src/detector\n# positions are then obtained by applying a rotation matrix.\n\n# Let's build the necessary components to instantiate the operator. ========================\nradius = (N_side * pitch / np.sqrt(2))  # be at diagonal distance\ntx = np.r_[-1, 0] * radius  # (2,)\nt_max = N_side * pitch / np.sqrt(2)\nt_offset = np.linspace(-t_max, t_max, N_offset, endpoint=True)\nrx = np.stack([radius * np.ones(N_offset), t_offset], axis=-1)  # (N_offset, 2)\n\nt = np.broadcast_to(tx, (N_offset, 2))\nn = rx - tx  # vectors pointing from unique TX to all RX.\n\nangle = np.linspace(0, 2 * np.pi, N_angle, endpoint=False)\nR = np.zeros((N_angle, 2, 2))\nR[:, 0, 0] = R[:, 1, 1] = np.cos(angle)\nR[:, 1, 0] = np.sin(angle)\nR[:, 0, 1] = -np.sin(angle)\n\nn_spec = (R @ n.T).transpose(0, 2, 1)  # (N_angle, N_offset, 2)\nt_spec = (R @ t.T).transpose(0, 2, 1)  # (N_angle, N_offset, 2)\n# ==========================================================================================\n\n\nop_fan = pxo.RayXRT(\n    dim_shape=(N_side, N_side),\n    origin=-N_side * pitch / 2,  # center of volume located at (0, 0)\n    pitch=pitch,  # pixel dimensions. (Can vary per axis.)\n    n_spec=n_spec.reshape(-1, 2),  # (N_ray, 2) directions\n    t_spec=t_spec.reshape(-1, 2),  # (N_ray, 2)\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "ones"
          ],
          "code_str": "np.ones",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.ones"
        },
        {
          "import_components": [
            "numpy",
            "stack"
          ],
          "code_str": "np.stack",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.stack"
        },
        {
          "import_components": [
            "numpy",
            "broadcast_to"
          ],
          "code_str": "np.broadcast_to",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.broadcast_to"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.sin"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Fan-Beam",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Fan Beam"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "ray_idx = np.arange(N_angle * N_offset).reshape(N_angle, N_offset)[[1, 10], ::10]\n\nfig = op_fan.diagnostic_plot(ray_idx)\nfig.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Fan-Beam",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Fan Beam"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Compute backprojected image and LSQ image. =======================\nsinogram = op_fan.apply(phantom).reshape(N_angle, N_offset)\nI_BP = op_fan.adjoint(sinogram.reshape(-1))\nI_LSQ = op_fan.pinv(sinogram.reshape(-1), damp=0)\n\n# Plot the images ==================================================\nfig, ax = plt.subplots(1, 5, figsize=[5, 7])\nax[0].imshow(phantom, **im_kwargs)\nax[1].imshow(I_BP, **im_kwargs)\nax[2].imshow(I_LSQ, **im_kwargs)\nax[3].imshow(I_BP_u, **im_kwargs)\nax[4].imshow(I_LSQ_u, **im_kwargs)\nax[0].set_title(\"Ground-Truth\")\nax[1].set_title(\"BP (Fan)\")\nax[2].set_title(\"LSQ (Fan)\")\nax[3].set_title(\"BP (Par)\")\nax[4].set_title(\"LSQ (Par)\")\nfor _ax in ax:\n    _ax.axis(\"off\")",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/xray",
        "ref_id": "Fan-Beam",
        "headings": [
          "Advanced Computerized Tomography with Pyxu",
          "2D Imaging",
          "Fan Beam"
        ]
      },
      "doc_lineno": null
    }
  ]
}